"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KakaoLink = void 0;
const querystring_1 = __importDefault(require("querystring"));
const crypto_js_1 = require("crypto-js");
const tough_cookie_1 = require("tough-cookie");
const got_1 = __importDefault(require("got"));
const unescapeHTML = (str) => str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#039;/g, '\'').replace(/&amp;/g, '&');
class KakaoLink {
    constructor(key, host, userAgent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36') {
        this.key = key;
        this.userAgent = userAgent;
        this.SHARER_LINK = 'https://sharer.kakao.com';
        this.TIARA_LINK = 'https://track.tiara.kakao.com';
        this.ACCOUNT_LINK = 'https://accounts.kakao.com';
        this.PICKER_LINK = `${this.SHARER_LINK}/talk/friends/picker/link`;
        this.SDK_VERSION = '1.39.14';
        this.connect = got_1.default.extend({
            headers: {
                'user-agent': this.userAgent,
            },
            hooks: {
                beforeError: [
                    (error) => {
                        const { response } = error;
                        console.log(response);
                        return error;
                    },
                ],
            },
        });
        this.SDK_INFO = '';
        this.p = '';
        this.continue = '';
        this.cookie = {};
        this.ver = '4.0';
        this.SDK_INFO = [
            `sdk/${this.SDK_VERSION}`,
            `os/javascript`,
            `sdk_type/javascript`,
            `lang/ko-KR`,
            `device/Linux_x86_64`,
            `origin/${querystring_1.default.escape(host)}`,
        ].join(' ');
    }
    get version() {
        return this.ver;
    }
    set version(val) {
        this.ver = val;
    }
    validateEmail(email) {
        const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email.toLowerCase());
    }
    enc(text) {
        return crypto_js_1.AES.encrypt(text, this.p).toString();
    }
    cooker(cookie) {
        const cook = {};
        let cookies = [];
        if (cookie instanceof Array) {
            cookies = cookie.map((c) => tough_cookie_1.parse(c).toJSON());
        }
        else {
            if (cookie) {
                cookies = [tough_cookie_1.parse(cookie).toJSON()];
            }
        }
        cookies.forEach((ck) => {
            cook[ck.key] = {
                value: ck.value,
                domain: ck.domain,
            };
        });
        return cook;
    }
    cook(filter) {
        const entries = Object.entries(this.cookie);
        const cookie = [];
        for (const [key, val] of entries) {
            if (filter) {
                if (filter.includes(key)) {
                    cookie.push(`${key}=${val.value}`);
                }
            }
            else {
                cookie.push(`${key}=${val.value}`);
            }
        }
        return cookie.join('; ') + ';';
    }
    cooking(cook, keys) {
        keys.forEach((k) => this.cookie[k] = cook[k]);
        return this.cookie;
    }
    req(method, url, data = {}, opt = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            method = method.toLowerCase();
            if (Object.keys(data).length) {
                opt['json'] = data;
            }
            const res = yield this.connect[method](url, opt);
            res.cookies = this.cooker(res.headers['set-cookie']);
            res.data = res.body;
            return res;
        });
    }
    picker(action = 'default', params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const opt = {};
            const cookie = this.cook(['_kadu', 'TIARA', '_kawlt', '_kawltea', '_karmt', '_karmtea']);
            if (cookie && this.continue) {
                opt['headers'] = {
                    'referer': this.continue,
                    'Cookie': cookie,
                };
            }
            return yield this.req('POST', this.PICKER_LINK, {
                'app_key': this.key,
                'validation_action': action,
                'validation_params': JSON.stringify(params),
                'ka': this.SDK_INFO,
                'lcba': '',
            }, opt);
        });
    }
    login(email, pw) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            if (!this.validateEmail(email)) {
                email += '@kakao.com';
            }
            res = yield this.picker();
            const ckey = res.data.match(/<input.*?name="p".*?value="(.*?)".*?>/m)[1];
            const token = res.data.match(/<meta.*?name="csrf-token".*?content="(.*?)".*?>/m)[1];
            this.p = ckey;
            this.continue = res.redirectUrls[0];
            this.cooking(res.cookies, ['_kadu', '_kadub', '_maldive_oauth_webapp_session']);
            res = yield this.req('POST', `${this.TIARA_LINK}/queen/footsteps`);
            this.cooking(res.cookies, ['TIARA']);
            res = yield this.req('POST', `${this.ACCOUNT_LINK}/weblogin/authenticate.json`, {
                'os': 'web',
                'webview_v': '2',
                'email': this.enc(email),
                'password': this.enc(pw),
                'continue': querystring_1.default.unescape(this.continue.replace(`${this.ACCOUNT_LINK}/login?continue=`, '')),
                'third': 'false',
                'k': 'true',
                'authenticity_token': token,
            }, {
                headers: {
                    'Referer': this.continue,
                    'Cookie': this.cook(),
                },
            });
            this.cooking(res.cookies, ['_kawlt', '_kawltea', '_karmt', '_karmtea']);
            return this;
        });
    }
    send(roomTitle, template) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            if (!template['link_ver']) {
                template['link_ver'] = this.version;
            }
            res = yield this.picker('custom', template);
            this.cooking(res.cookies, ['KSHARER', 'using']);
            const tmpStr = res.data.match(/<input.*?value="(.*?)".*?id="validatedTalkLink".*?>/m)[1];
            template = JSON.parse(unescapeHTML(tmpStr));
            const token = res.data.match(/<div.*?ng-init="token='(.*?)'".*?>/m)[1];
            res = yield this.req('GET', `${this.SHARER_LINK}/api/talk/chats`, {}, {
                headers: {
                    'Referer': this.PICKER_LINK,
                    'Csrf-Token': token,
                    'App-Key': this.key,
                    'Cookie': this.cook(),
                },
            });
            const { securityKey, chats } = JSON.parse(res.data);
            const room = chats.find((c) => c['title'] === roomTitle);
            if (!room)
                return false;
            res = yield this.req('POST', `${this.SHARER_LINK}/api/talk/message/link`, {
                'validatedTalkLink': template,
                securityKey,
                'receiverType': 'chat',
                'receiverIds': [room.id],
                'receiverChatRoomMemberCount': [1],
            }, {
                headers: {
                    'Referer': this.PICKER_LINK,
                    'Csrf-Token': token,
                    'App-Key': this.key,
                    'Cookie': this.cook(['_kadu', 'TIARA', '_kawlt', '_kawltea', '_karmt', '_karmtea', 'KSHARER', 'using']),
                },
            });
            return true;
        });
    }
}
exports.KakaoLink = KakaoLink;
//# sourceMappingURL=index.js.map